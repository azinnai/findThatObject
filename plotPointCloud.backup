#include <GL/glew.h> // Include the GLEW header file
#include <GL/glut.h> // Include the GLUT header file
#include <GL/gl.h>
#include <GL/glu.h>
#include <string>
#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <sstream>


std::string cloudPath;

void display (void)
{
    glClearColor(1.0f, 0.0f, 0.0f, 1.0f); // Clear the background of our window to red
    glClear(GL_COLOR_BUFFER_BIT); //Clear the colour buffer (more buffers later on)
    glLoadIdentity(); // Load the Identity Matrix to reset our drawing locations

    std::ifstream indata;
    std::string line;
    std::vector<double> point;

    indata.open(cloudPath);

    if(!indata.is_open())
    {
        std::cout << "Failed to open " << cloudPath << std::endl;
        throw -1;
    }


    glFlush(); // Flush the OpenGL buffers to the window
    while (std::getline(indata, line)) {

        glColor3f(1,0,0);      // the r,g,b colour of the points
        glPointSize(1.0);     // where size indicates the size of the point
        glBegin(GL_POINTS);

        std::stringstream lineStream(line);
        std::string cell;
        int i = 0;
        while (std::getline(lineStream, cell, ' '))
        {
            point[i] = std::stod(cell);
            ++i;
        }
        glVertex3f(point[0], point[1], point[2]);

    }
    glEnd();
    glFlush();
    indata.close();

}


/*void draw (void)
{
        glClearColor(1,1,1,1);
        glClear(GL_COLOR_BUFFER_BIT);
        glColor3f(1,0,0);      // the r,g,b colour of the points
        glPointSize(1.0);     // where size indicates the size of the point
        glBegin(GL_POINTS);

        std::stringstream lineStream(line);
        std::string cell;
        int i = 0;

        while (std::getline(lineStream, cell, ' '))
        {
            point[i] = std::stod(cell);
            ++i;
        }
        glVertex3f(point[0], point[1], point[2]);

    }
    glEnd();
    glFlush();
    indata.close();
}

*/


int plotPointCloud (int argc, char **argv){

    glutInit(&argc, argv); // Initialize GLUT
    glutInitDisplayMode (GLUT_SINGLE); // Set up a basic display buffer (only single buffered for now)
    glutInitWindowSize (500, 500); // Set the width and height of the window
    glutInitWindowPosition (100, 100); // Set the position of the window
    glutCreateWindow ("Your first OpenGL Window"); // Set the title for the window

    glutDisplayFunc(display); // Tell GLUT to use the method "display" for rendering

    glutMainLoop(); // Enter GLUT's main loop
}




